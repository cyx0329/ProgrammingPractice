class LFUCache {
    HashMap<Integer, Node> map;
    HashMap<Integer, DLList> freqMap;
    int size, capacity;
    int maxFreq;

    public LFUCache(int capacity) {
        map = new HashMap<>(capacity);
        freqMap = new HashMap<>();
        this.capacity = capacity;
        size = 0;
        maxFreq = 0;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node = map.get(key);
        int prevFreq = node.freq;
        DLList prevList = freqMap.get(prevFreq);
        prevList.remove(node);
        
        int curFreq = prevFreq+1;
        maxFreq = Math.max(maxFreq, curFreq);
        DLList curList = freqMap.getOrDefault(curFreq, new DLList());
        node.freq++;
        curList.addHead(node);
        
        freqMap.put(prevFreq, prevList);
        freqMap.put(curFreq, curList);
        
        return node.value;     
    }
    
    public void put(int key, int value) {
        if(capacity == 0) return;
        if(map.containsKey(key)) {
            map.get(key).value = value;
            get(key);
            return;
        }
        
        Node node = new Node(key, value);
        DLList curList = freqMap.getOrDefault(1, new DLList());
        curList.addHead(node);
        size++;
        
        if(size > capacity) {
               if(curList.len > 1) {
                   curList.removeTail();
               } else {
                   for(int i = 2; i <= maxFreq; i++) {
                       if(freqMap.get(i) != null && freqMap.get(i).len > 0) {
                           freqMap.get(i).removeTail();
                           break;
                       }
                   }
               }
               size--;
        }
        freqMap.put(1, curList);

    
    }
    
    class Node {
        int key, value, freq;
        Node prev, next;
        public Node(int key, int value) {
            this.key = key;
            this.value = value;
            this.freq = 1;
        }
    }
    
    class DLList {
        Node head, tail;
        int len;
        public DLList() {
            head = new Node(0, 0);
            tail = new Node(0, 0);
            head.next = tail;
            tail.prev = head;
            len = 0;
        }
        
        public void addHead(Node node) {
            node.prev = head; 
            node.next = head.next;
            head.next.prev = node;
            head.next = node;
            map.put(node.key, node);
            len++;
        }
    
        public void remove(Node node) {
            Node prev = node.prev;
            Node next = node.next;
            next.prev = prev;
            prev.next = next;
            map.remove(node.key);
            len--;
        }
        
        public void removeTail() {
            Node prevTail = tail.prev;
            remove(prevTail);
        } 
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
//runtime:19 ms
//memory:53.8 MB
